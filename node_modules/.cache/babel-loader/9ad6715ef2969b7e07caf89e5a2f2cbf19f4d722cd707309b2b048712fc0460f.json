{"ast":null,"code":"export const provider = (state = {}, action) => {\n  switch (action.type) {\n    case 'PROVIDER_LOADED':\n      return {\n        ...state,\n        connection: action.connection\n      };\n    case 'NETWORK_LOADED':\n      return {\n        ...state,\n        chainId: action.chainId\n      };\n    case 'ACCOUNT_LOADED':\n      return {\n        ...state,\n        account: action.account\n      };\n    case 'ETHER_BALANCE_LOADED':\n      return {\n        ...state,\n        balance: action.balance\n      };\n    default:\n      return state;\n  }\n};\nconst DEFAULT_TOKENS_STATE = {\n  loaded: false,\n  contracts: [],\n  symbols: []\n};\nexport const tokens = (state = DEFAULT_TOKENS_STATE, action) => {\n  switch (action.type) {\n    case 'TOKEN_1_LOADED':\n      return {\n        ...state,\n        loaded: true,\n        contracts: [action.token],\n        symbols: [action.symbol]\n      };\n    case 'TOKEN_1_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [action.balance]\n      };\n    case 'TOKEN_2_LOADED':\n      return {\n        ...state,\n        loaded: true,\n        contracts: [...state.contracts, action.token],\n        symbols: [...state.symbols, action.symbol]\n      };\n    case 'TOKEN_2_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [...state.balances, action.balance]\n      };\n    default:\n      return state;\n  }\n};\nconst DEFAULT_EXCHANGE_STATE = {\n  loaded: false,\n  contract: {},\n  transaction: {\n    isSuccessful: false\n  },\n  allOrders: {\n    loaded: false,\n    data: []\n  },\n  cancelledOrders: {\n    data: []\n  },\n  filledOrders: {\n    data: []\n  },\n  events: []\n};\nexport const exchange = (state = DEFAULT_EXCHANGE_STATE, action) => {\n  let index, data;\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return {\n        ...state,\n        loaded: true,\n        contract: action.exchange\n      };\n\n    // ------------------------------------------------------------------------------\n    // ORDERS LOADED (CANCELLED, FILLED & ALL)\n\n    case 'CANCELLED_ORDERS_LOADED':\n      return {\n        ...state,\n        cancelledOrders: {\n          loaded: true,\n          data: action.cancelledOrders\n        }\n      };\n    case 'FILLED_ORDERS_LOADED':\n      return {\n        ...state,\n        filledOrders: {\n          loaded: true,\n          data: action.filledOrders\n        }\n      };\n    case 'ALL_ORDERS_LOADED':\n      return {\n        ...state,\n        allOrders: {\n          loaded: true,\n          data: action.allOrders\n        }\n      };\n\n    // ------------------------------------------------------------------------------\n    // CANCELLING ORDERS\n    case 'ORDER_CANCEL_REQUEST':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Cancel',\n          isPending: true,\n          isSuccessful: false\n        }\n      };\n    case 'ORDER_CANCEL_SUCCESS':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Cancel',\n          isPending: false,\n          isSuccessful: true\n        },\n        cancelledOrders: {\n          ...state.cancelledOrders,\n          data: [...state.cancelledOrders.data, action.order]\n        },\n        events: [action.event, ...state.events]\n      };\n    case 'ORDER_CANCEL_FAIL':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Cancel',\n          isPending: false,\n          isSuccessful: false,\n          isError: true\n        }\n      };\n\n    // ------------------------------------------------------------------------------\n    // FILLING ORDERS\n    case 'ORDER_FILL_REQUEST':\n      return {\n        ...state,\n        transaction: {\n          transactionType: \"Fill Order\",\n          isPending: true,\n          isSuccessful: false\n        }\n      };\n    case 'ORDER_FILL_SUCCESS':\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(order => order.id.toString() === action.order.id.toString());\n      if (index === -1) {\n        data = [...state.filledOrders.data, action.order];\n      } else {\n        data = state.filledOrders.data;\n      }\n      return {\n        ...state,\n        transaction: {\n          transactionType: \"Fill Order\",\n          isPending: false,\n          isSuccessful: true\n        },\n        filledOrders: {\n          ...state.filledOrders,\n          data\n        },\n        events: [action.event, ...state.events]\n      };\n    case 'ORDER_FILL_FAIL':\n      return {\n        ...state,\n        transaction: {\n          transactionType: \"Fill Order\",\n          isPending: false,\n          isSuccessful: false,\n          isError: true\n        }\n      };\n\n    // ------------------------------------------------------------------------------\n    // BALANCE CASES\n    case 'EXCHANGE_TOKEN_1_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [action.balance]\n      };\n    case 'EXCHANGE_TOKEN_2_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [...state.balances, action.balance]\n      };\n\n    // ------------------------------------------------------------------------------\n    // TRANSFER CASES (DEPOSIT & WITHDRAWS)\n    case 'TRANSFER_REQUEST':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Transfer',\n          isPending: true,\n          isSuccessful: false\n        },\n        transferInProgress: true\n      };\n    case 'TRANSFER_SUCCESS':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Transfer',\n          isPending: false,\n          isSuccessful: true\n        },\n        transferInProgress: false,\n        events: [action.event, ...state.events]\n      };\n    case 'TRANSFER_FAIL':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Transfer',\n          isPending: false,\n          isSuccessful: false,\n          isError: true\n        },\n        transferInProgress: false\n      };\n\n    // ------------------------------------------------------------------------------\n    // MAKING ORDERS CASES\n\n    case 'NEW_ORDER_REQUEST':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'New Order',\n          isPending: true,\n          isSuccessful: false\n        }\n      };\n    case 'NEW_ORDER_SUCCESS':\n      // Prevent duplicate orders\n      index = state.allOrders.data.findIndex(order => order.id.toString() === action.order.id.toString());\n      if (index === -1) {\n        data = [...state.allOrders.data, action.order];\n      } else {\n        data = state.allOrders.data;\n      }\n      return {\n        ...state,\n        allOrders: {\n          ...state.allOrders,\n          data\n        },\n        transaction: {\n          transactionType: 'New Order',\n          isPending: false,\n          isSuccessful: true\n        },\n        events: [action.event, ...state.events]\n      };\n    case 'NEW_ORDER_FAIL':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'New Order',\n          isPending: false,\n          isSuccessful: false,\n          isError: true\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["provider","state","action","type","connection","chainId","account","balance","DEFAULT_TOKENS_STATE","loaded","contracts","symbols","tokens","token","symbol","balances","DEFAULT_EXCHANGE_STATE","contract","transaction","isSuccessful","allOrders","data","cancelledOrders","filledOrders","events","exchange","index","transactionType","isPending","order","event","isError","findIndex","id","toString","transferInProgress"],"sources":["/home/tomas/code/blockchain-developer-bootcamp_legacy_version/src/store/reducers.js"],"sourcesContent":["export const provider = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'PROVIDER_LOADED':\r\n      return {\r\n        ...state,\r\n        connection: action.connection\r\n      }\r\n    case 'NETWORK_LOADED':\r\n      return {\r\n        ...state,\r\n        chainId: action.chainId\r\n      }\r\n    case 'ACCOUNT_LOADED':\r\n      return {\r\n        ...state,\r\n        account: action.account\r\n      }\r\n    case 'ETHER_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balance: action.balance\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst DEFAULT_TOKENS_STATE = {\r\n  loaded: false,\r\n  contracts: [],\r\n  symbols: []\r\n}\r\n\r\nexport const tokens = (state = DEFAULT_TOKENS_STATE, action) => {\r\n  switch (action.type) {\r\n    case 'TOKEN_1_LOADED':\r\n      return {\r\n        ...state,\r\n        loaded: true,\r\n        contracts: [action.token],\r\n        symbols: [action.symbol]\r\n      }\r\n    case 'TOKEN_1_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [action.balance]\r\n      }\r\n\r\n    case 'TOKEN_2_LOADED':\r\n      return {\r\n        ...state,\r\n        loaded: true,\r\n        contracts: [...state.contracts, action.token],\r\n        symbols: [...state.symbols, action.symbol]\r\n      }\r\n\r\n    case 'TOKEN_2_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [...state.balances, action.balance]\r\n      }\r\n\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\nconst DEFAULT_EXCHANGE_STATE = {\r\n  loaded: false,\r\n  contract: {},\r\n  transaction: {\r\n    isSuccessful: false\r\n  },\r\n  allOrders: {\r\n    loaded: false,\r\n    data: []\r\n  },\r\n  cancelledOrders: {\r\n    data: []\r\n  },\r\n  filledOrders: {\r\n    data: []\r\n  },\r\n  events: []\r\n}\r\n\r\nexport const exchange = (state = DEFAULT_EXCHANGE_STATE, action) => {\r\n  let index, data\r\n\r\n  switch (action.type) {\r\n    case 'EXCHANGE_LOADED':\r\n      return {\r\n        ...state,\r\n        loaded: true,\r\n        contract: action.exchange\r\n      }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    // ORDERS LOADED (CANCELLED, FILLED & ALL)\r\n\r\n    case 'CANCELLED_ORDERS_LOADED':\r\n      return {\r\n        ...state,\r\n        cancelledOrders: {\r\n          loaded: true,\r\n          data: action.cancelledOrders\r\n        }\r\n      }\r\n\r\n    case 'FILLED_ORDERS_LOADED':\r\n      return {\r\n        ...state,\r\n        filledOrders: {\r\n          loaded: true,\r\n          data: action.filledOrders\r\n        }\r\n      }\r\n\r\n    case 'ALL_ORDERS_LOADED':\r\n      return {\r\n        ...state,\r\n        allOrders: {\r\n          loaded: true,\r\n          data: action.allOrders\r\n        }\r\n      }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    // CANCELLING ORDERS\r\n    case 'ORDER_CANCEL_REQUEST':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Cancel',\r\n          isPending: true,\r\n          isSuccessful: false\r\n        }\r\n      }\r\n\r\n    case 'ORDER_CANCEL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Cancel',\r\n          isPending: false,\r\n          isSuccessful: true\r\n        },\r\n        cancelledOrders: {\r\n          ...state.cancelledOrders,\r\n          data: [\r\n            ...state.cancelledOrders.data,\r\n            action.order\r\n          ]\r\n        },\r\n        events: [action.event, ...state.events]\r\n      }\r\n\r\n    case 'ORDER_CANCEL_FAIL':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Cancel',\r\n          isPending: false,\r\n          isSuccessful: false,\r\n          isError: true\r\n        }\r\n      }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    // FILLING ORDERS\r\n    case 'ORDER_FILL_REQUEST':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: \"Fill Order\",\r\n          isPending: true,\r\n          isSuccessful: false\r\n        }\r\n      }\r\n\r\n    case 'ORDER_FILL_SUCCESS':\r\n      // Prevent duplicate orders\r\n      index = state.filledOrders.data.findIndex(order => order.id.toString() === action.order.id.toString())\r\n\r\n      if (index === -1) {\r\n        data = [...state.filledOrders.data, action.order]\r\n      } else {\r\n        data = state.filledOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: \"Fill Order\",\r\n          isPending: false,\r\n          isSuccessful: true\r\n        },\r\n        filledOrders: {\r\n          ...state.filledOrders,\r\n          data\r\n        },\r\n        events: [action.event, ...state.events]\r\n      }\r\n\r\n    case 'ORDER_FILL_FAIL':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: \"Fill Order\",\r\n          isPending: false,\r\n          isSuccessful: false,\r\n          isError: true\r\n        }\r\n      }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    // BALANCE CASES\r\n    case 'EXCHANGE_TOKEN_1_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [action.balance]\r\n      }\r\n    case 'EXCHANGE_TOKEN_2_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [...state.balances, action.balance]\r\n      }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    // TRANSFER CASES (DEPOSIT & WITHDRAWS)\r\n    case 'TRANSFER_REQUEST':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Transfer',\r\n          isPending: true,\r\n          isSuccessful: false\r\n        },\r\n        transferInProgress: true\r\n      }\r\n    case 'TRANSFER_SUCCESS':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Transfer',\r\n          isPending: false,\r\n          isSuccessful: true\r\n        },\r\n        transferInProgress: false,\r\n        events: [action.event, ...state.events]\r\n      }\r\n    case 'TRANSFER_FAIL':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Transfer',\r\n          isPending: false,\r\n          isSuccessful: false,\r\n          isError: true\r\n        },\r\n        transferInProgress: false\r\n      }\r\n\r\n    // ------------------------------------------------------------------------------\r\n    // MAKING ORDERS CASES\r\n\r\n    case 'NEW_ORDER_REQUEST':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'New Order',\r\n          isPending: true,\r\n          isSuccessful: false\r\n        },\r\n      }\r\n\r\n    case 'NEW_ORDER_SUCCESS':\r\n      // Prevent duplicate orders\r\n      index = state.allOrders.data.findIndex(order => order.id.toString() === action.order.id.toString())\r\n\r\n      if(index === -1) {\r\n        data = [...state.allOrders.data, action.order]\r\n      } else {\r\n        data = state.allOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        allOrders: {\r\n          ...state.allOrders,\r\n          data\r\n        },\r\n        transaction: {\r\n          transactionType: 'New Order',\r\n          isPending: false,\r\n          isSuccessful: true\r\n        },\r\n        events: [action.event, ...state.events]\r\n      }\r\n\r\n    case 'NEW_ORDER_FAIL':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'New Order',\r\n          isPending: false,\r\n          isSuccessful: false,\r\n          isError: true\r\n        },\r\n      }\r\n\r\n      default:\r\n        return state\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}