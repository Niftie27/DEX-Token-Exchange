{"ast":null,"code":"import { ethers } from 'ethers';\nimport TOKEN_ABI from '../abis/Token.json';\nimport EXCHANGE_ABI from '../abis/Exchange.json';\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: 'PROVIDER_LOADED',\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: 'NETWORK_LOADED',\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async (provider, dispatch) => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: 'ACCOUNT_LOADED',\n    account\n  });\n  let balance = await provider.getBalance(account);\n  balance = ethers.utils.formatEther(balance);\n  dispatch({\n    type: 'ETHER_BALANCE_LOADED',\n    balance\n  });\n  return account;\n};\nexport const loadTokens = async (provider, addresses, dispatch) => {\n  let token, symbol;\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_1_LOADED',\n    token,\n    symbol\n  });\n  token = new ethers.Contract(addresses[1], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_2_LOADED',\n    token,\n    symbol\n  });\n  return token;\n};\nexport const loadExchange = async (provider, address, dispatch) => {\n  const exchange = new ethers.Contract(address, EXCHANGE_ABI, provider);\n  dispatch({\n    type: 'EXCHANGE_LOADED',\n    exchange\n  });\n  return exchange;\n};\nexport const subscribeToEvents = (exchange, dispatch) => {\n  exchange.on('Cancel', (id, user, tokenGet, amountGet, tokenGive, amountGive, timestamp, event) => {\n    const order = event.args;\n    dispatch({\n      type: 'ORDER_CANCEL_SUCCESS',\n      order,\n      event\n    });\n  });\n  exchange.on('Trade', (id, user, tokenGet, amountGet, tokenGive, amountGive, creator, timestamp, event) => {\n    const order = event.args;\n    dispatch({\n      type: 'ORDER_FILL_SUCCESS',\n      order,\n      event\n    });\n  });\n  exchange.on('Deposit', (token, user, amount, balance, event) => {\n    dispatch({\n      type: 'TRANSFER_SUCCESS',\n      event\n    });\n  });\n  exchange.on('Withdraw', (token, user, amount, balance, event) => {\n    dispatch({\n      type: 'TRANSFER_SUCCESS',\n      event\n    });\n  });\n  exchange.on('Order', (id, user, tokenGet, amountGet, tokenGive, amountGive, timestamp, event) => {\n    const order = event.args;\n    dispatch({\n      type: 'NEW_ORDER_SUCCESS',\n      order,\n      event\n    });\n  });\n};\n\n// ------------------------------------------------------------------------------\n// LOAD USER BALANCES (WALLET & EXCHANGE BALANCES)\n\nexport const loadBalances = async (exchange, tokens, account, dispatch) => {\n  let balance = ethers.utils.formatUnits(await tokens[0].balanceOf(account), 18);\n  dispatch({\n    type: 'TOKEN_1_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatUnits(await exchange.balanceOf(tokens[0].address, account), 18);\n  dispatch({\n    type: 'EXCHANGE_TOKEN_1_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatUnits(await tokens[1].balanceOf(account), 18);\n  dispatch({\n    type: 'TOKEN_2_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatUnits(await exchange.balanceOf(tokens[1].address, account), 18);\n  dispatch({\n    type: 'EXCHANGE_TOKEN_2_BALANCE_LOADED',\n    balance\n  });\n};\n\n// ------------------------------------------------------------------------------\n// LOAD ALL ORDERS\n\nexport const loadAllOrders = async (provider, exchange, dispatch) => {\n  const block = await provider.getBlockNumber();\n\n  // Fetch canceled orders\n  const cancelStream = await exchange.queryFilter('Cancel', 0, block);\n  const cancelledOrders = cancelStream.map(event => event.args);\n  dispatch({\n    type: 'CANCELLED_ORDERS_LOADED',\n    cancelledOrders\n  });\n\n  // Fetch filled orders\n  const tradeStream = await exchange.queryFilter('Trade', 0, block);\n  const filledOrders = tradeStream.map(event => event.args);\n  dispatch({\n    type: 'FILLED_ORDERS_LOADED',\n    filledOrders\n  });\n\n  // Fetch all orders\n  const orderStream = await exchange.queryFilter('Order', 0, block);\n  const allOrders = orderStream.map(event => event.args);\n  dispatch({\n    type: 'ALL_ORDERS_LOADED',\n    allOrders\n  });\n};\n\n// ------------------------------------------------------------------------------\n// TRANSFER TOKENS (DEPOSIT & WITHDRAWS)\n\nexport const transferTokens = async (provider, exchange, transferType, token, amount, dispatch) => {\n  let transaction;\n  dispatch({\n    type: 'TRANSFER_REQUEST'\n  });\n  try {\n    const signer = await provider.getSigner();\n    const amountToTransfer = ethers.utils.parseUnits(amount.toString(), 18);\n    if (transferType === 'Deposit') {\n      transaction = await token.connect(signer).approve(exchange.address, amountToTransfer);\n      await transaction.wait();\n      transaction = await exchange.connect(signer).depositToken(token.address, amountToTransfer);\n    } else {\n      transaction = await exchange.connect(signer).withdrawToken(token.address, amountToTransfer);\n    }\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'TRANSFER_FAIL'\n    });\n  }\n};\n\n// ------------------------------------------------------------------------------\n// ORDERS (BUY & SELL)\n\nexport const makeBuyOrder = async (provider, exchange, tokens, order, dispatch) => {\n  const tokenGet = tokens[0].address;\n  const amountGet = ethers.utils.parseUnits(order.amount, 18);\n  const tokenGive = tokens[1].address;\n  const amountGive = ethers.utils.parseUnits((order.amount * order.price).toString(), 18);\n  dispatch({\n    type: 'NEW_ORDER_REQUEST'\n  });\n  try {\n    const signer = await provider.getSigner();\n    const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'NEW_ORDER_FAIL'\n    });\n  }\n};\nexport const makeSellOrder = async (provider, exchange, tokens, order, dispatch) => {\n  const tokenGet = tokens[1].address;\n  const amountGet = ethers.utils.parseUnits((order.amount * order.price).toString(), 18);\n  const tokenGive = tokens[0].address;\n  const amountGive = ethers.utils.parseUnits(order.amount, 18);\n  dispatch({\n    type: 'NEW_ORDER_REQUEST'\n  });\n  try {\n    const signer = await provider.getSigner();\n    const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'NEW_ORDER_FAIL'\n    });\n  }\n};\n\n// ------------------------------------------------------------------------------\n// CANCEL ORDER\n\nexport const cancelOrder = async (provider, exchange, order, dispatch) => {\n  dispatch({\n    type: 'ORDER_CANCEL_REQUEST'\n  });\n  try {\n    const signer = await provider.getSigner();\n    const transaction = await exchange.connect(signer).cancelOrder(order.id);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'ORDER_CANCEL_FAIL'\n    });\n  }\n};\n\n// ------------------------------------------------------------------------------\n// FILL ORDER\n\nexport const fillOrder = async (provider, exchange, order, dispatch) => {\n  dispatch({\n    type: 'ORDER_FILL_REQUEST'\n  });\n  try {\n    const signer = await provider.getSigner();\n    const transaction = await exchange.connect(signer).fillOrder(order.id);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'ORDER_FILL_FAIL'\n    });\n  }\n};","map":{"version":3,"names":["ethers","TOKEN_ABI","EXCHANGE_ABI","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","balance","getBalance","formatEther","loadTokens","addresses","token","symbol","Contract","loadExchange","address","exchange","subscribeToEvents","on","id","user","tokenGet","amountGet","tokenGive","amountGive","timestamp","event","order","args","creator","amount","loadBalances","tokens","formatUnits","balanceOf","loadAllOrders","block","getBlockNumber","cancelStream","queryFilter","cancelledOrders","map","tradeStream","filledOrders","orderStream","allOrders","transferTokens","transferType","transaction","signer","getSigner","amountToTransfer","parseUnits","toString","connect","approve","wait","depositToken","withdrawToken","error","makeBuyOrder","price","makeOrder","makeSellOrder","cancelOrder","fillOrder"],"sources":["/home/tomas/code/blockchain-developer-bootcamp_legacy_version/src/store/interactions.js"],"sourcesContent":["import { ethers } from 'ethers'\r\nimport TOKEN_ABI from '../abis/Token.json';\r\nimport EXCHANGE_ABI from '../abis/Exchange.json';\r\n\r\nexport const loadProvider = (dispatch) => {\r\n  const connection = new ethers.providers.Web3Provider(window.ethereum)\r\n  dispatch({ type: 'PROVIDER_LOADED', connection })\r\n\r\n  return connection\r\n}\r\n\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  const { chainId } = await provider.getNetwork()\r\n  dispatch({ type: 'NETWORK_LOADED', chainId })\r\n\r\n  return chainId\r\n}\r\n\r\nexport const loadAccount = async (provider, dispatch) => {\r\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n  const account = ethers.utils.getAddress(accounts[0])\r\n\r\n  dispatch({ type: 'ACCOUNT_LOADED', account })\r\n\r\n  let balance = await provider.getBalance(account)\r\n  balance = ethers.utils.formatEther(balance)\r\n\r\n  dispatch({ type: 'ETHER_BALANCE_LOADED', balance })\r\n\r\n  return account\r\n}\r\n\r\nexport const loadTokens = async (provider, addresses, dispatch) => {\r\n  let token, symbol\r\n\r\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_1_LOADED', token, symbol })\r\n\r\n  token = new ethers.Contract(addresses[1], TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_2_LOADED', token, symbol })\r\n\r\n  return token\r\n}\r\n\r\nexport const loadExchange = async (provider, address, dispatch) => {\r\n  const exchange = new ethers.Contract(address, EXCHANGE_ABI, provider);\r\n  dispatch({ type: 'EXCHANGE_LOADED', exchange })\r\n\r\n  return exchange\r\n}\r\n\r\nexport const subscribeToEvents = (exchange, dispatch) => {\r\n  exchange.on('Cancel', (id, user, tokenGet, amountGet, tokenGive, amountGive, timestamp, event) => {\r\n    const order = event.args\r\n    dispatch({ type: 'ORDER_CANCEL_SUCCESS', order, event })\r\n  })\r\n\r\n  exchange.on('Trade', (id, user, tokenGet, amountGet, tokenGive, amountGive, creator, timestamp, event) => {\r\n    const order = event.args\r\n    dispatch({ type: 'ORDER_FILL_SUCCESS', order, event })\r\n  })\r\n\r\n  exchange.on('Deposit', (token, user, amount, balance, event) => {\r\n    dispatch({ type: 'TRANSFER_SUCCESS', event })\r\n  })\r\n\r\n  exchange.on('Withdraw', (token, user, amount, balance, event) => {\r\n    dispatch({ type: 'TRANSFER_SUCCESS', event })\r\n  })\r\n\r\n  exchange.on('Order', (id, user, tokenGet, amountGet, tokenGive, amountGive, timestamp, event) => {\r\n    const order = event.args\r\n    dispatch({ type: 'NEW_ORDER_SUCCESS', order, event })\r\n  })\r\n}\r\n\r\n// ------------------------------------------------------------------------------\r\n// LOAD USER BALANCES (WALLET & EXCHANGE BALANCES)\r\n\r\n\r\nexport const loadBalances = async (exchange, tokens, account, dispatch) => {\r\n  let balance = ethers.utils.formatUnits(await tokens[0].balanceOf(account), 18)\r\n  dispatch({ type: 'TOKEN_1_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatUnits(await exchange.balanceOf(tokens[0].address, account), 18)\r\n  dispatch({ type: 'EXCHANGE_TOKEN_1_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatUnits(await tokens[1].balanceOf(account), 18)\r\n  dispatch({ type: 'TOKEN_2_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatUnits(await exchange.balanceOf(tokens[1].address, account), 18)\r\n  dispatch({ type: 'EXCHANGE_TOKEN_2_BALANCE_LOADED', balance })\r\n\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------------\r\n// LOAD ALL ORDERS\r\n\r\nexport const loadAllOrders = async (provider, exchange, dispatch) => {\r\n\r\n  const block = await provider.getBlockNumber()\r\n\r\n  // Fetch canceled orders\r\n  const cancelStream = await exchange.queryFilter('Cancel', 0, block)\r\n  const cancelledOrders = cancelStream.map(event => event.args)\r\n\r\n  dispatch({ type: 'CANCELLED_ORDERS_LOADED', cancelledOrders })\r\n\r\n  // Fetch filled orders\r\n  const tradeStream = await exchange.queryFilter('Trade', 0, block)\r\n  const filledOrders = tradeStream.map(event => event.args)\r\n\r\n  dispatch({ type: 'FILLED_ORDERS_LOADED', filledOrders })\r\n\r\n  // Fetch all orders\r\n  const orderStream = await exchange.queryFilter('Order', 0, block)\r\n  const allOrders = orderStream.map(event => event.args)\r\n\r\n  dispatch({ type: 'ALL_ORDERS_LOADED', allOrders })\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------------\r\n// TRANSFER TOKENS (DEPOSIT & WITHDRAWS)\r\n\r\nexport const transferTokens =  async (provider, exchange, transferType, token, amount, dispatch) => {\r\n  let transaction\r\n\r\n  dispatch({ type: 'TRANSFER_REQUEST' })\r\n\r\n  try {\r\n    const signer = await provider.getSigner()\r\n    const amountToTransfer = ethers.utils.parseUnits(amount.toString(), 18)\r\n\r\n    if (transferType === 'Deposit') {\r\n      transaction = await token.connect(signer).approve(exchange.address, amountToTransfer)\r\n      await transaction.wait()\r\n      transaction = await exchange.connect(signer).depositToken(token.address, amountToTransfer)\r\n    } else {\r\n      transaction = await exchange.connect(signer).withdrawToken(token.address, amountToTransfer)\r\n    }\r\n\r\n    await transaction.wait()\r\n\r\n  } catch(error) {\r\n    dispatch({ type: 'TRANSFER_FAIL' })\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------------\r\n// ORDERS (BUY & SELL)\r\n\r\nexport const makeBuyOrder = async (provider, exchange, tokens, order, dispatch) => {\r\n  const tokenGet = tokens[0].address\r\n  const amountGet = ethers.utils.parseUnits(order.amount, 18)\r\n  const tokenGive = tokens[1].address\r\n  const amountGive = ethers.utils.parseUnits((order.amount * order.price).toString(), 18)\r\n\r\n  dispatch({ type: 'NEW_ORDER_REQUEST' })\r\n\r\n  try {\r\n    const signer = await provider.getSigner()\r\n    const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive)\r\n    await transaction.wait()\r\n  } catch (error) {\r\n    dispatch({ type: 'NEW_ORDER_FAIL' })\r\n  }\r\n}\r\n\r\nexport const makeSellOrder = async (provider, exchange, tokens, order, dispatch) => {\r\n  const tokenGet = tokens[1].address\r\n  const amountGet = ethers.utils.parseUnits((order.amount * order.price).toString(), 18)\r\n  const tokenGive = tokens[0].address\r\n  const amountGive = ethers.utils.parseUnits(order.amount, 18)\r\n\r\n  dispatch({ type: 'NEW_ORDER_REQUEST' })\r\n\r\n  try {\r\n    const signer = await provider.getSigner()\r\n    const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive)\r\n    await transaction.wait()\r\n  } catch (error) {\r\n    dispatch({ type: 'NEW_ORDER_FAIL' })\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------------\r\n// CANCEL ORDER\r\n\r\nexport const cancelOrder = async (provider, exchange, order, dispatch) => {\r\n\r\n  dispatch({ type: 'ORDER_CANCEL_REQUEST' })\r\n\r\n  try {\r\n    const signer = await provider.getSigner()\r\n    const transaction = await exchange.connect(signer).cancelOrder(order.id)\r\n    await transaction.wait()\r\n  } catch (error) {\r\n    dispatch({ type: 'ORDER_CANCEL_FAIL' })\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------------\r\n// FILL ORDER\r\n\r\nexport const fillOrder = async (provider, exchange, order, dispatch) => {\r\n  dispatch({ type: 'ORDER_FILL_REQUEST' })\r\n\r\n  try {\r\n    const signer = await provider.getSigner()\r\n    const transaction = await exchange.connect(signer).fillOrder(order.id)\r\n    await transaction.wait()\r\n  } catch (error) {\r\n    dispatch({ type: 'ORDER_FILL_FAIL' })\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}